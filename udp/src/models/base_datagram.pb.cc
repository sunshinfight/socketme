// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_datagram.proto

#include "base_datagram.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_base_5fdatagram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContactTran_base_5fdatagram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fdatagram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContactsContent_base_5fdatagram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fdatagram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgContent_base_5fdatagram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fdatagram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextContent_base_5fdatagram_2eproto;
namespace jx {
class ContactTranDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContactTran> _instance;
} _ContactTran_default_instance_;
class MsgContentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgContent> _instance;
} _MsgContent_default_instance_;
class TextContentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextContent> _instance;
} _TextContent_default_instance_;
class ContactsContentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContactsContent> _instance;
} _ContactsContent_default_instance_;
class BaseDatagramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseDatagram> _instance;
  const ::jx::MsgContent* msg_;
  const ::jx::ContactsContent* contacts_;
  const ::jx::TextContent* text_;
} _BaseDatagram_default_instance_;
}  // namespace jx
static void InitDefaultsscc_info_BaseDatagram_base_5fdatagram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jx::_BaseDatagram_default_instance_;
    new (ptr) ::jx::BaseDatagram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jx::BaseDatagram::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BaseDatagram_base_5fdatagram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_BaseDatagram_base_5fdatagram_2eproto}, {
      &scc_info_MsgContent_base_5fdatagram_2eproto.base,
      &scc_info_ContactsContent_base_5fdatagram_2eproto.base,
      &scc_info_TextContent_base_5fdatagram_2eproto.base,}};

static void InitDefaultsscc_info_ContactTran_base_5fdatagram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jx::_ContactTran_default_instance_;
    new (ptr) ::jx::ContactTran();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jx::ContactTran::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContactTran_base_5fdatagram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContactTran_base_5fdatagram_2eproto}, {}};

static void InitDefaultsscc_info_ContactsContent_base_5fdatagram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jx::_ContactsContent_default_instance_;
    new (ptr) ::jx::ContactsContent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jx::ContactsContent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContactsContent_base_5fdatagram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContactsContent_base_5fdatagram_2eproto}, {
      &scc_info_ContactTran_base_5fdatagram_2eproto.base,}};

static void InitDefaultsscc_info_MsgContent_base_5fdatagram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jx::_MsgContent_default_instance_;
    new (ptr) ::jx::MsgContent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jx::MsgContent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgContent_base_5fdatagram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgContent_base_5fdatagram_2eproto}, {}};

static void InitDefaultsscc_info_TextContent_base_5fdatagram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jx::_TextContent_default_instance_;
    new (ptr) ::jx::TextContent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jx::TextContent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextContent_base_5fdatagram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextContent_base_5fdatagram_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_base_5fdatagram_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_base_5fdatagram_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_base_5fdatagram_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_base_5fdatagram_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jx::ContactTran, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jx::ContactTran, ip_),
  PROTOBUF_FIELD_OFFSET(::jx::ContactTran, port_),
  PROTOBUF_FIELD_OFFSET(::jx::ContactTran, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jx::MsgContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jx::MsgContent, msgbody_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jx::TextContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jx::TextContent, textbody_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jx::ContactsContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jx::ContactsContent, contact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jx::BaseDatagram, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::jx::BaseDatagram, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jx::BaseDatagram, header_),
  offsetof(::jx::BaseDatagramDefaultTypeInternal, msg_),
  offsetof(::jx::BaseDatagramDefaultTypeInternal, contacts_),
  offsetof(::jx::BaseDatagramDefaultTypeInternal, text_),
  PROTOBUF_FIELD_OFFSET(::jx::BaseDatagram, content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::jx::ContactTran)},
  { 8, -1, sizeof(::jx::MsgContent)},
  { 14, -1, sizeof(::jx::TextContent)},
  { 20, -1, sizeof(::jx::ContactsContent)},
  { 26, -1, sizeof(::jx::BaseDatagram)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jx::_ContactTran_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jx::_MsgContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jx::_TextContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jx::_ContactsContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jx::_BaseDatagram_default_instance_),
};

const char descriptor_table_protodef_base_5fdatagram_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023base_datagram.proto\022\002jx\"7\n\013ContactTran"
  "\022\n\n\002ip\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022\016\n\006userId\030\003 \001"
  "(\005\"\035\n\nMsgContent\022\017\n\007msgBody\030\001 \003(\014\"\037\n\013Tex"
  "tContent\022\020\n\010textBody\030\001 \001(\t\"3\n\017ContactsCo"
  "ntent\022 \n\007contact\030\001 \003(\0132\017.jx.ContactTran\""
  "\252\001\n\014BaseDatagram\022&\n\006header\030\001 \001(\0162\026.jx.Ba"
  "seDatagramHeader\022\035\n\003msg\030\002 \001(\0132\016.jx.MsgCo"
  "ntentH\000\022\'\n\010contacts\030\003 \001(\0132\023.jx.ContactsC"
  "ontentH\000\022\037\n\004text\030\004 \001(\0132\017.jx.TextContentH"
  "\000B\t\n\007content*W\n\022BaseDatagramHeader\022\021\n\rCo"
  "ntactHeader\020\000\022\017\n\013HelloHeader\020\001\022\r\n\tMsgHea"
  "der\020\002\022\016\n\nTextHeader\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_base_5fdatagram_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_base_5fdatagram_2eproto_sccs[5] = {
  &scc_info_BaseDatagram_base_5fdatagram_2eproto.base,
  &scc_info_ContactTran_base_5fdatagram_2eproto.base,
  &scc_info_ContactsContent_base_5fdatagram_2eproto.base,
  &scc_info_MsgContent_base_5fdatagram_2eproto.base,
  &scc_info_TextContent_base_5fdatagram_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_base_5fdatagram_2eproto_once;
static bool descriptor_table_base_5fdatagram_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_5fdatagram_2eproto = {
  &descriptor_table_base_5fdatagram_2eproto_initialized, descriptor_table_protodef_base_5fdatagram_2eproto, "base_datagram.proto", 469,
  &descriptor_table_base_5fdatagram_2eproto_once, descriptor_table_base_5fdatagram_2eproto_sccs, descriptor_table_base_5fdatagram_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_base_5fdatagram_2eproto::offsets,
  file_level_metadata_base_5fdatagram_2eproto, 5, file_level_enum_descriptors_base_5fdatagram_2eproto, file_level_service_descriptors_base_5fdatagram_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_base_5fdatagram_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_base_5fdatagram_2eproto), true);
namespace jx {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BaseDatagramHeader_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fdatagram_2eproto);
  return file_level_enum_descriptors_base_5fdatagram_2eproto[0];
}
bool BaseDatagramHeader_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ContactTran::InitAsDefaultInstance() {
}
class ContactTran::_Internal {
 public:
};

ContactTran::ContactTran()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jx.ContactTran)
}
ContactTran::ContactTran(const ContactTran& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:jx.ContactTran)
}

void ContactTran::SharedCtor() {
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(userid_));
}

ContactTran::~ContactTran() {
  // @@protoc_insertion_point(destructor:jx.ContactTran)
  SharedDtor();
}

void ContactTran::SharedDtor() {
}

void ContactTran::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContactTran& ContactTran::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContactTran_base_5fdatagram_2eproto.base);
  return *internal_default_instance();
}


void ContactTran::Clear() {
// @@protoc_insertion_point(message_clear_start:jx.ContactTran)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(userid_));
  _internal_metadata_.Clear();
}

const char* ContactTran::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 userId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContactTran::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jx.ContactTran)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // int32 userId = 3;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jx.ContactTran)
  return target;
}

size_t ContactTran::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jx.ContactTran)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int32 userId = 3;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactTran::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jx.ContactTran)
  GOOGLE_DCHECK_NE(&from, this);
  const ContactTran* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContactTran>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jx.ContactTran)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jx.ContactTran)
    MergeFrom(*source);
  }
}

void ContactTran::MergeFrom(const ContactTran& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jx.ContactTran)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip() != 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void ContactTran::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jx.ContactTran)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactTran::CopyFrom(const ContactTran& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jx.ContactTran)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactTran::IsInitialized() const {
  return true;
}

void ContactTran::InternalSwap(ContactTran* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ip_, other->ip_);
  swap(port_, other->port_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContactTran::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgContent::InitAsDefaultInstance() {
}
class MsgContent::_Internal {
 public:
};

MsgContent::MsgContent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jx.MsgContent)
}
MsgContent::MsgContent(const MsgContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msgbody_(from.msgbody_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jx.MsgContent)
}

void MsgContent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgContent_base_5fdatagram_2eproto.base);
}

MsgContent::~MsgContent() {
  // @@protoc_insertion_point(destructor:jx.MsgContent)
  SharedDtor();
}

void MsgContent::SharedDtor() {
}

void MsgContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgContent& MsgContent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgContent_base_5fdatagram_2eproto.base);
  return *internal_default_instance();
}


void MsgContent::Clear() {
// @@protoc_insertion_point(message_clear_start:jx.MsgContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgbody_.Clear();
  _internal_metadata_.Clear();
}

const char* MsgContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes msgBody = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_msgbody();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jx.MsgContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes msgBody = 1;
  for (int i = 0, n = this->_internal_msgbody_size(); i < n; i++) {
    const auto& s = this->_internal_msgbody(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jx.MsgContent)
  return target;
}

size_t MsgContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jx.MsgContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes msgBody = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(msgbody_.size());
  for (int i = 0, n = msgbody_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      msgbody_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jx.MsgContent)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgContent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jx.MsgContent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jx.MsgContent)
    MergeFrom(*source);
  }
}

void MsgContent::MergeFrom(const MsgContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jx.MsgContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgbody_.MergeFrom(from.msgbody_);
}

void MsgContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jx.MsgContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgContent::CopyFrom(const MsgContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jx.MsgContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgContent::IsInitialized() const {
  return true;
}

void MsgContent::InternalSwap(MsgContent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msgbody_.InternalSwap(&other->msgbody_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgContent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextContent::InitAsDefaultInstance() {
}
class TextContent::_Internal {
 public:
};

TextContent::TextContent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jx.TextContent)
}
TextContent::TextContent(const TextContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  textbody_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_textbody().empty()) {
    textbody_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.textbody_);
  }
  // @@protoc_insertion_point(copy_constructor:jx.TextContent)
}

void TextContent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextContent_base_5fdatagram_2eproto.base);
  textbody_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TextContent::~TextContent() {
  // @@protoc_insertion_point(destructor:jx.TextContent)
  SharedDtor();
}

void TextContent::SharedDtor() {
  textbody_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextContent& TextContent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextContent_base_5fdatagram_2eproto.base);
  return *internal_default_instance();
}


void TextContent::Clear() {
// @@protoc_insertion_point(message_clear_start:jx.TextContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  textbody_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TextContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string textBody = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_textbody();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jx.TextContent.textBody"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jx.TextContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string textBody = 1;
  if (this->textbody().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_textbody().data(), static_cast<int>(this->_internal_textbody().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jx.TextContent.textBody");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_textbody(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jx.TextContent)
  return target;
}

size_t TextContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jx.TextContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string textBody = 1;
  if (this->textbody().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_textbody());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jx.TextContent)
  GOOGLE_DCHECK_NE(&from, this);
  const TextContent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jx.TextContent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jx.TextContent)
    MergeFrom(*source);
  }
}

void TextContent::MergeFrom(const TextContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jx.TextContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.textbody().size() > 0) {

    textbody_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.textbody_);
  }
}

void TextContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jx.TextContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextContent::CopyFrom(const TextContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jx.TextContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextContent::IsInitialized() const {
  return true;
}

void TextContent::InternalSwap(TextContent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  textbody_.Swap(&other->textbody_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TextContent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContactsContent::InitAsDefaultInstance() {
}
class ContactsContent::_Internal {
 public:
};

ContactsContent::ContactsContent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jx.ContactsContent)
}
ContactsContent::ContactsContent(const ContactsContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      contact_(from.contact_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jx.ContactsContent)
}

void ContactsContent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContactsContent_base_5fdatagram_2eproto.base);
}

ContactsContent::~ContactsContent() {
  // @@protoc_insertion_point(destructor:jx.ContactsContent)
  SharedDtor();
}

void ContactsContent::SharedDtor() {
}

void ContactsContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContactsContent& ContactsContent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContactsContent_base_5fdatagram_2eproto.base);
  return *internal_default_instance();
}


void ContactsContent::Clear() {
// @@protoc_insertion_point(message_clear_start:jx.ContactsContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contact_.Clear();
  _internal_metadata_.Clear();
}

const char* ContactsContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .jx.ContactTran contact = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contact(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContactsContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jx.ContactsContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jx.ContactTran contact = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contact_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_contact(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jx.ContactsContent)
  return target;
}

size_t ContactsContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jx.ContactsContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jx.ContactTran contact = 1;
  total_size += 1UL * this->_internal_contact_size();
  for (const auto& msg : this->contact_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactsContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jx.ContactsContent)
  GOOGLE_DCHECK_NE(&from, this);
  const ContactsContent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContactsContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jx.ContactsContent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jx.ContactsContent)
    MergeFrom(*source);
  }
}

void ContactsContent::MergeFrom(const ContactsContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jx.ContactsContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contact_.MergeFrom(from.contact_);
}

void ContactsContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jx.ContactsContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactsContent::CopyFrom(const ContactsContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jx.ContactsContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactsContent::IsInitialized() const {
  return true;
}

void ContactsContent::InternalSwap(ContactsContent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  contact_.InternalSwap(&other->contact_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContactsContent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseDatagram::InitAsDefaultInstance() {
  ::jx::_BaseDatagram_default_instance_.msg_ = const_cast< ::jx::MsgContent*>(
      ::jx::MsgContent::internal_default_instance());
  ::jx::_BaseDatagram_default_instance_.contacts_ = const_cast< ::jx::ContactsContent*>(
      ::jx::ContactsContent::internal_default_instance());
  ::jx::_BaseDatagram_default_instance_.text_ = const_cast< ::jx::TextContent*>(
      ::jx::TextContent::internal_default_instance());
}
class BaseDatagram::_Internal {
 public:
  static const ::jx::MsgContent& msg(const BaseDatagram* msg);
  static const ::jx::ContactsContent& contacts(const BaseDatagram* msg);
  static const ::jx::TextContent& text(const BaseDatagram* msg);
};

const ::jx::MsgContent&
BaseDatagram::_Internal::msg(const BaseDatagram* msg) {
  return *msg->content_.msg_;
}
const ::jx::ContactsContent&
BaseDatagram::_Internal::contacts(const BaseDatagram* msg) {
  return *msg->content_.contacts_;
}
const ::jx::TextContent&
BaseDatagram::_Internal::text(const BaseDatagram* msg) {
  return *msg->content_.text_;
}
void BaseDatagram::set_allocated_msg(::jx::MsgContent* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    set_has_msg();
    content_.msg_ = msg;
  }
  // @@protoc_insertion_point(field_set_allocated:jx.BaseDatagram.msg)
}
void BaseDatagram::set_allocated_contacts(::jx::ContactsContent* contacts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (contacts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      contacts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contacts, submessage_arena);
    }
    set_has_contacts();
    content_.contacts_ = contacts;
  }
  // @@protoc_insertion_point(field_set_allocated:jx.BaseDatagram.contacts)
}
void BaseDatagram::set_allocated_text(::jx::TextContent* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    set_has_text();
    content_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:jx.BaseDatagram.text)
}
BaseDatagram::BaseDatagram()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jx.BaseDatagram)
}
BaseDatagram::BaseDatagram(const BaseDatagram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_ = from.header_;
  clear_has_content();
  switch (from.content_case()) {
    case kMsg: {
      _internal_mutable_msg()->::jx::MsgContent::MergeFrom(from._internal_msg());
      break;
    }
    case kContacts: {
      _internal_mutable_contacts()->::jx::ContactsContent::MergeFrom(from._internal_contacts());
      break;
    }
    case kText: {
      _internal_mutable_text()->::jx::TextContent::MergeFrom(from._internal_text());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:jx.BaseDatagram)
}

void BaseDatagram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseDatagram_base_5fdatagram_2eproto.base);
  header_ = 0;
  clear_has_content();
}

BaseDatagram::~BaseDatagram() {
  // @@protoc_insertion_point(destructor:jx.BaseDatagram)
  SharedDtor();
}

void BaseDatagram::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
}

void BaseDatagram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseDatagram& BaseDatagram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseDatagram_base_5fdatagram_2eproto.base);
  return *internal_default_instance();
}


void BaseDatagram::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:jx.BaseDatagram)
  switch (content_case()) {
    case kMsg: {
      delete content_.msg_;
      break;
    }
    case kContacts: {
      delete content_.contacts_;
      break;
    }
    case kText: {
      delete content_.text_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void BaseDatagram::Clear() {
// @@protoc_insertion_point(message_clear_start:jx.BaseDatagram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_ = 0;
  clear_content();
  _internal_metadata_.Clear();
}

const char* BaseDatagram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .jx.BaseDatagramHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_header(static_cast<::jx::BaseDatagramHeader>(val));
        } else goto handle_unusual;
        continue;
      // .jx.MsgContent msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jx.ContactsContent contacts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contacts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jx.TextContent text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseDatagram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jx.BaseDatagram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .jx.BaseDatagramHeader header = 1;
  if (this->header() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_header(), target);
  }

  // .jx.MsgContent msg = 2;
  if (_internal_has_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg(this), target, stream);
  }

  // .jx.ContactsContent contacts = 3;
  if (_internal_has_contacts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::contacts(this), target, stream);
  }

  // .jx.TextContent text = 4;
  if (_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::text(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jx.BaseDatagram)
  return target;
}

size_t BaseDatagram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jx.BaseDatagram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .jx.BaseDatagramHeader header = 1;
  if (this->header() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_header());
  }

  switch (content_case()) {
    // .jx.MsgContent msg = 2;
    case kMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.msg_);
      break;
    }
    // .jx.ContactsContent contacts = 3;
    case kContacts: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.contacts_);
      break;
    }
    // .jx.TextContent text = 4;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.text_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseDatagram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jx.BaseDatagram)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseDatagram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseDatagram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jx.BaseDatagram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jx.BaseDatagram)
    MergeFrom(*source);
  }
}

void BaseDatagram::MergeFrom(const BaseDatagram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jx.BaseDatagram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.header() != 0) {
    _internal_set_header(from._internal_header());
  }
  switch (from.content_case()) {
    case kMsg: {
      _internal_mutable_msg()->::jx::MsgContent::MergeFrom(from._internal_msg());
      break;
    }
    case kContacts: {
      _internal_mutable_contacts()->::jx::ContactsContent::MergeFrom(from._internal_contacts());
      break;
    }
    case kText: {
      _internal_mutable_text()->::jx::TextContent::MergeFrom(from._internal_text());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void BaseDatagram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jx.BaseDatagram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseDatagram::CopyFrom(const BaseDatagram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jx.BaseDatagram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseDatagram::IsInitialized() const {
  return true;
}

void BaseDatagram::InternalSwap(BaseDatagram* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseDatagram::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace jx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::jx::ContactTran* Arena::CreateMaybeMessage< ::jx::ContactTran >(Arena* arena) {
  return Arena::CreateInternal< ::jx::ContactTran >(arena);
}
template<> PROTOBUF_NOINLINE ::jx::MsgContent* Arena::CreateMaybeMessage< ::jx::MsgContent >(Arena* arena) {
  return Arena::CreateInternal< ::jx::MsgContent >(arena);
}
template<> PROTOBUF_NOINLINE ::jx::TextContent* Arena::CreateMaybeMessage< ::jx::TextContent >(Arena* arena) {
  return Arena::CreateInternal< ::jx::TextContent >(arena);
}
template<> PROTOBUF_NOINLINE ::jx::ContactsContent* Arena::CreateMaybeMessage< ::jx::ContactsContent >(Arena* arena) {
  return Arena::CreateInternal< ::jx::ContactsContent >(arena);
}
template<> PROTOBUF_NOINLINE ::jx::BaseDatagram* Arena::CreateMaybeMessage< ::jx::BaseDatagram >(Arena* arena) {
  return Arena::CreateInternal< ::jx::BaseDatagram >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
