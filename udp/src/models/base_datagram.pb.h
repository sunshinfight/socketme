// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_datagram.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_5fdatagram_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_5fdatagram_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_5fdatagram_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_5fdatagram_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_5fdatagram_2eproto;
namespace jx {
class BaseDatagram;
class BaseDatagramDefaultTypeInternal;
extern BaseDatagramDefaultTypeInternal _BaseDatagram_default_instance_;
class ContactTran;
class ContactTranDefaultTypeInternal;
extern ContactTranDefaultTypeInternal _ContactTran_default_instance_;
class ContactsContent;
class ContactsContentDefaultTypeInternal;
extern ContactsContentDefaultTypeInternal _ContactsContent_default_instance_;
class MsgContent;
class MsgContentDefaultTypeInternal;
extern MsgContentDefaultTypeInternal _MsgContent_default_instance_;
class TextContent;
class TextContentDefaultTypeInternal;
extern TextContentDefaultTypeInternal _TextContent_default_instance_;
}  // namespace jx
PROTOBUF_NAMESPACE_OPEN
template<> ::jx::BaseDatagram* Arena::CreateMaybeMessage<::jx::BaseDatagram>(Arena*);
template<> ::jx::ContactTran* Arena::CreateMaybeMessage<::jx::ContactTran>(Arena*);
template<> ::jx::ContactsContent* Arena::CreateMaybeMessage<::jx::ContactsContent>(Arena*);
template<> ::jx::MsgContent* Arena::CreateMaybeMessage<::jx::MsgContent>(Arena*);
template<> ::jx::TextContent* Arena::CreateMaybeMessage<::jx::TextContent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace jx {

enum BaseDatagramHeader : int {
  ContactHeader = 0,
  HelloHeader = 1,
  MsgHeader = 2,
  TextHeader = 3,
  BaseDatagramHeader_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BaseDatagramHeader_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BaseDatagramHeader_IsValid(int value);
constexpr BaseDatagramHeader BaseDatagramHeader_MIN = ContactHeader;
constexpr BaseDatagramHeader BaseDatagramHeader_MAX = TextHeader;
constexpr int BaseDatagramHeader_ARRAYSIZE = BaseDatagramHeader_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BaseDatagramHeader_descriptor();
template<typename T>
inline const std::string& BaseDatagramHeader_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BaseDatagramHeader>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BaseDatagramHeader_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BaseDatagramHeader_descriptor(), enum_t_value);
}
inline bool BaseDatagramHeader_Parse(
    const std::string& name, BaseDatagramHeader* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BaseDatagramHeader>(
    BaseDatagramHeader_descriptor(), name, value);
}
// ===================================================================

class ContactTran :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jx.ContactTran) */ {
 public:
  ContactTran();
  virtual ~ContactTran();

  ContactTran(const ContactTran& from);
  ContactTran(ContactTran&& from) noexcept
    : ContactTran() {
    *this = ::std::move(from);
  }

  inline ContactTran& operator=(const ContactTran& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactTran& operator=(ContactTran&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContactTran& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactTran* internal_default_instance() {
    return reinterpret_cast<const ContactTran*>(
               &_ContactTran_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContactTran& a, ContactTran& b) {
    a.Swap(&b);
  }
  inline void Swap(ContactTran* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContactTran* New() const final {
    return CreateMaybeMessage<ContactTran>(nullptr);
  }

  ContactTran* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContactTran>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContactTran& from);
  void MergeFrom(const ContactTran& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactTran* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jx.ContactTran";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fdatagram_2eproto);
    return ::descriptor_table_base_5fdatagram_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // int32 ip = 1;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::int32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 userId = 3;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:jx.ContactTran)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fdatagram_2eproto;
};
// -------------------------------------------------------------------

class MsgContent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jx.MsgContent) */ {
 public:
  MsgContent();
  virtual ~MsgContent();

  MsgContent(const MsgContent& from);
  MsgContent(MsgContent&& from) noexcept
    : MsgContent() {
    *this = ::std::move(from);
  }

  inline MsgContent& operator=(const MsgContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgContent& operator=(MsgContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgContent* internal_default_instance() {
    return reinterpret_cast<const MsgContent*>(
               &_MsgContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgContent& a, MsgContent& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgContent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgContent* New() const final {
    return CreateMaybeMessage<MsgContent>(nullptr);
  }

  MsgContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgContent& from);
  void MergeFrom(const MsgContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jx.MsgContent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fdatagram_2eproto);
    return ::descriptor_table_base_5fdatagram_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 1,
  };
  // repeated bytes msgBody = 1;
  int msgbody_size() const;
  private:
  int _internal_msgbody_size() const;
  public:
  void clear_msgbody();
  const std::string& msgbody(int index) const;
  std::string* mutable_msgbody(int index);
  void set_msgbody(int index, const std::string& value);
  void set_msgbody(int index, std::string&& value);
  void set_msgbody(int index, const char* value);
  void set_msgbody(int index, const void* value, size_t size);
  std::string* add_msgbody();
  void add_msgbody(const std::string& value);
  void add_msgbody(std::string&& value);
  void add_msgbody(const char* value);
  void add_msgbody(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msgbody() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msgbody();
  private:
  const std::string& _internal_msgbody(int index) const;
  std::string* _internal_add_msgbody();
  public:

  // @@protoc_insertion_point(class_scope:jx.MsgContent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msgbody_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fdatagram_2eproto;
};
// -------------------------------------------------------------------

class TextContent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jx.TextContent) */ {
 public:
  TextContent();
  virtual ~TextContent();

  TextContent(const TextContent& from);
  TextContent(TextContent&& from) noexcept
    : TextContent() {
    *this = ::std::move(from);
  }

  inline TextContent& operator=(const TextContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextContent& operator=(TextContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextContent* internal_default_instance() {
    return reinterpret_cast<const TextContent*>(
               &_TextContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TextContent& a, TextContent& b) {
    a.Swap(&b);
  }
  inline void Swap(TextContent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextContent* New() const final {
    return CreateMaybeMessage<TextContent>(nullptr);
  }

  TextContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextContent& from);
  void MergeFrom(const TextContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jx.TextContent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fdatagram_2eproto);
    return ::descriptor_table_base_5fdatagram_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextBodyFieldNumber = 1,
  };
  // string textBody = 1;
  void clear_textbody();
  const std::string& textbody() const;
  void set_textbody(const std::string& value);
  void set_textbody(std::string&& value);
  void set_textbody(const char* value);
  void set_textbody(const char* value, size_t size);
  std::string* mutable_textbody();
  std::string* release_textbody();
  void set_allocated_textbody(std::string* textbody);
  private:
  const std::string& _internal_textbody() const;
  void _internal_set_textbody(const std::string& value);
  std::string* _internal_mutable_textbody();
  public:

  // @@protoc_insertion_point(class_scope:jx.TextContent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr textbody_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fdatagram_2eproto;
};
// -------------------------------------------------------------------

class ContactsContent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jx.ContactsContent) */ {
 public:
  ContactsContent();
  virtual ~ContactsContent();

  ContactsContent(const ContactsContent& from);
  ContactsContent(ContactsContent&& from) noexcept
    : ContactsContent() {
    *this = ::std::move(from);
  }

  inline ContactsContent& operator=(const ContactsContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactsContent& operator=(ContactsContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContactsContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactsContent* internal_default_instance() {
    return reinterpret_cast<const ContactsContent*>(
               &_ContactsContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ContactsContent& a, ContactsContent& b) {
    a.Swap(&b);
  }
  inline void Swap(ContactsContent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContactsContent* New() const final {
    return CreateMaybeMessage<ContactsContent>(nullptr);
  }

  ContactsContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContactsContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContactsContent& from);
  void MergeFrom(const ContactsContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactsContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jx.ContactsContent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fdatagram_2eproto);
    return ::descriptor_table_base_5fdatagram_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContactFieldNumber = 1,
  };
  // repeated .jx.ContactTran contact = 1;
  int contact_size() const;
  private:
  int _internal_contact_size() const;
  public:
  void clear_contact();
  ::jx::ContactTran* mutable_contact(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jx::ContactTran >*
      mutable_contact();
  private:
  const ::jx::ContactTran& _internal_contact(int index) const;
  ::jx::ContactTran* _internal_add_contact();
  public:
  const ::jx::ContactTran& contact(int index) const;
  ::jx::ContactTran* add_contact();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jx::ContactTran >&
      contact() const;

  // @@protoc_insertion_point(class_scope:jx.ContactsContent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jx::ContactTran > contact_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fdatagram_2eproto;
};
// -------------------------------------------------------------------

class BaseDatagram :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jx.BaseDatagram) */ {
 public:
  BaseDatagram();
  virtual ~BaseDatagram();

  BaseDatagram(const BaseDatagram& from);
  BaseDatagram(BaseDatagram&& from) noexcept
    : BaseDatagram() {
    *this = ::std::move(from);
  }

  inline BaseDatagram& operator=(const BaseDatagram& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseDatagram& operator=(BaseDatagram&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseDatagram& default_instance();

  enum ContentCase {
    kMsg = 2,
    kContacts = 3,
    kText = 4,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseDatagram* internal_default_instance() {
    return reinterpret_cast<const BaseDatagram*>(
               &_BaseDatagram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BaseDatagram& a, BaseDatagram& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseDatagram* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseDatagram* New() const final {
    return CreateMaybeMessage<BaseDatagram>(nullptr);
  }

  BaseDatagram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseDatagram>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseDatagram& from);
  void MergeFrom(const BaseDatagram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseDatagram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jx.BaseDatagram";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fdatagram_2eproto);
    return ::descriptor_table_base_5fdatagram_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kMsgFieldNumber = 2,
    kContactsFieldNumber = 3,
    kTextFieldNumber = 4,
  };
  // .jx.BaseDatagramHeader header = 1;
  void clear_header();
  ::jx::BaseDatagramHeader header() const;
  void set_header(::jx::BaseDatagramHeader value);
  private:
  ::jx::BaseDatagramHeader _internal_header() const;
  void _internal_set_header(::jx::BaseDatagramHeader value);
  public:

  // .jx.MsgContent msg = 2;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::jx::MsgContent& msg() const;
  ::jx::MsgContent* release_msg();
  ::jx::MsgContent* mutable_msg();
  void set_allocated_msg(::jx::MsgContent* msg);
  private:
  const ::jx::MsgContent& _internal_msg() const;
  ::jx::MsgContent* _internal_mutable_msg();
  public:

  // .jx.ContactsContent contacts = 3;
  bool has_contacts() const;
  private:
  bool _internal_has_contacts() const;
  public:
  void clear_contacts();
  const ::jx::ContactsContent& contacts() const;
  ::jx::ContactsContent* release_contacts();
  ::jx::ContactsContent* mutable_contacts();
  void set_allocated_contacts(::jx::ContactsContent* contacts);
  private:
  const ::jx::ContactsContent& _internal_contacts() const;
  ::jx::ContactsContent* _internal_mutable_contacts();
  public:

  // .jx.TextContent text = 4;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::jx::TextContent& text() const;
  ::jx::TextContent* release_text();
  ::jx::TextContent* mutable_text();
  void set_allocated_text(::jx::TextContent* text);
  private:
  const ::jx::TextContent& _internal_text() const;
  ::jx::TextContent* _internal_mutable_text();
  public:

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:jx.BaseDatagram)
 private:
  class _Internal;
  void set_has_msg();
  void set_has_contacts();
  void set_has_text();

  inline bool has_content() const;
  inline void clear_has_content();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int header_;
  union ContentUnion {
    ContentUnion() {}
    ::jx::MsgContent* msg_;
    ::jx::ContactsContent* contacts_;
    ::jx::TextContent* text_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_base_5fdatagram_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContactTran

// int32 ip = 1;
inline void ContactTran::clear_ip() {
  ip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContactTran::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContactTran::ip() const {
  // @@protoc_insertion_point(field_get:jx.ContactTran.ip)
  return _internal_ip();
}
inline void ContactTran::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ip_ = value;
}
inline void ContactTran::set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:jx.ContactTran.ip)
}

// int32 port = 2;
inline void ContactTran::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContactTran::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContactTran::port() const {
  // @@protoc_insertion_point(field_get:jx.ContactTran.port)
  return _internal_port();
}
inline void ContactTran::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void ContactTran::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:jx.ContactTran.port)
}

// int32 userId = 3;
inline void ContactTran::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContactTran::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContactTran::userid() const {
  // @@protoc_insertion_point(field_get:jx.ContactTran.userId)
  return _internal_userid();
}
inline void ContactTran::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void ContactTran::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:jx.ContactTran.userId)
}

// -------------------------------------------------------------------

// MsgContent

// repeated bytes msgBody = 1;
inline int MsgContent::_internal_msgbody_size() const {
  return msgbody_.size();
}
inline int MsgContent::msgbody_size() const {
  return _internal_msgbody_size();
}
inline void MsgContent::clear_msgbody() {
  msgbody_.Clear();
}
inline std::string* MsgContent::add_msgbody() {
  // @@protoc_insertion_point(field_add_mutable:jx.MsgContent.msgBody)
  return _internal_add_msgbody();
}
inline const std::string& MsgContent::_internal_msgbody(int index) const {
  return msgbody_.Get(index);
}
inline const std::string& MsgContent::msgbody(int index) const {
  // @@protoc_insertion_point(field_get:jx.MsgContent.msgBody)
  return _internal_msgbody(index);
}
inline std::string* MsgContent::mutable_msgbody(int index) {
  // @@protoc_insertion_point(field_mutable:jx.MsgContent.msgBody)
  return msgbody_.Mutable(index);
}
inline void MsgContent::set_msgbody(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:jx.MsgContent.msgBody)
  msgbody_.Mutable(index)->assign(value);
}
inline void MsgContent::set_msgbody(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:jx.MsgContent.msgBody)
  msgbody_.Mutable(index)->assign(std::move(value));
}
inline void MsgContent::set_msgbody(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msgbody_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jx.MsgContent.msgBody)
}
inline void MsgContent::set_msgbody(int index, const void* value, size_t size) {
  msgbody_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jx.MsgContent.msgBody)
}
inline std::string* MsgContent::_internal_add_msgbody() {
  return msgbody_.Add();
}
inline void MsgContent::add_msgbody(const std::string& value) {
  msgbody_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jx.MsgContent.msgBody)
}
inline void MsgContent::add_msgbody(std::string&& value) {
  msgbody_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jx.MsgContent.msgBody)
}
inline void MsgContent::add_msgbody(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msgbody_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jx.MsgContent.msgBody)
}
inline void MsgContent::add_msgbody(const void* value, size_t size) {
  msgbody_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jx.MsgContent.msgBody)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgContent::msgbody() const {
  // @@protoc_insertion_point(field_list:jx.MsgContent.msgBody)
  return msgbody_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MsgContent::mutable_msgbody() {
  // @@protoc_insertion_point(field_mutable_list:jx.MsgContent.msgBody)
  return &msgbody_;
}

// -------------------------------------------------------------------

// TextContent

// string textBody = 1;
inline void TextContent::clear_textbody() {
  textbody_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TextContent::textbody() const {
  // @@protoc_insertion_point(field_get:jx.TextContent.textBody)
  return _internal_textbody();
}
inline void TextContent::set_textbody(const std::string& value) {
  _internal_set_textbody(value);
  // @@protoc_insertion_point(field_set:jx.TextContent.textBody)
}
inline std::string* TextContent::mutable_textbody() {
  // @@protoc_insertion_point(field_mutable:jx.TextContent.textBody)
  return _internal_mutable_textbody();
}
inline const std::string& TextContent::_internal_textbody() const {
  return textbody_.GetNoArena();
}
inline void TextContent::_internal_set_textbody(const std::string& value) {
  
  textbody_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TextContent::set_textbody(std::string&& value) {
  
  textbody_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jx.TextContent.textBody)
}
inline void TextContent::set_textbody(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  textbody_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jx.TextContent.textBody)
}
inline void TextContent::set_textbody(const char* value, size_t size) {
  
  textbody_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jx.TextContent.textBody)
}
inline std::string* TextContent::_internal_mutable_textbody() {
  
  return textbody_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TextContent::release_textbody() {
  // @@protoc_insertion_point(field_release:jx.TextContent.textBody)
  
  return textbody_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TextContent::set_allocated_textbody(std::string* textbody) {
  if (textbody != nullptr) {
    
  } else {
    
  }
  textbody_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), textbody);
  // @@protoc_insertion_point(field_set_allocated:jx.TextContent.textBody)
}

// -------------------------------------------------------------------

// ContactsContent

// repeated .jx.ContactTran contact = 1;
inline int ContactsContent::_internal_contact_size() const {
  return contact_.size();
}
inline int ContactsContent::contact_size() const {
  return _internal_contact_size();
}
inline void ContactsContent::clear_contact() {
  contact_.Clear();
}
inline ::jx::ContactTran* ContactsContent::mutable_contact(int index) {
  // @@protoc_insertion_point(field_mutable:jx.ContactsContent.contact)
  return contact_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jx::ContactTran >*
ContactsContent::mutable_contact() {
  // @@protoc_insertion_point(field_mutable_list:jx.ContactsContent.contact)
  return &contact_;
}
inline const ::jx::ContactTran& ContactsContent::_internal_contact(int index) const {
  return contact_.Get(index);
}
inline const ::jx::ContactTran& ContactsContent::contact(int index) const {
  // @@protoc_insertion_point(field_get:jx.ContactsContent.contact)
  return _internal_contact(index);
}
inline ::jx::ContactTran* ContactsContent::_internal_add_contact() {
  return contact_.Add();
}
inline ::jx::ContactTran* ContactsContent::add_contact() {
  // @@protoc_insertion_point(field_add:jx.ContactsContent.contact)
  return _internal_add_contact();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jx::ContactTran >&
ContactsContent::contact() const {
  // @@protoc_insertion_point(field_list:jx.ContactsContent.contact)
  return contact_;
}

// -------------------------------------------------------------------

// BaseDatagram

// .jx.BaseDatagramHeader header = 1;
inline void BaseDatagram::clear_header() {
  header_ = 0;
}
inline ::jx::BaseDatagramHeader BaseDatagram::_internal_header() const {
  return static_cast< ::jx::BaseDatagramHeader >(header_);
}
inline ::jx::BaseDatagramHeader BaseDatagram::header() const {
  // @@protoc_insertion_point(field_get:jx.BaseDatagram.header)
  return _internal_header();
}
inline void BaseDatagram::_internal_set_header(::jx::BaseDatagramHeader value) {
  
  header_ = value;
}
inline void BaseDatagram::set_header(::jx::BaseDatagramHeader value) {
  _internal_set_header(value);
  // @@protoc_insertion_point(field_set:jx.BaseDatagram.header)
}

// .jx.MsgContent msg = 2;
inline bool BaseDatagram::_internal_has_msg() const {
  return content_case() == kMsg;
}
inline bool BaseDatagram::has_msg() const {
  return _internal_has_msg();
}
inline void BaseDatagram::set_has_msg() {
  _oneof_case_[0] = kMsg;
}
inline void BaseDatagram::clear_msg() {
  if (_internal_has_msg()) {
    delete content_.msg_;
    clear_has_content();
  }
}
inline ::jx::MsgContent* BaseDatagram::release_msg() {
  // @@protoc_insertion_point(field_release:jx.BaseDatagram.msg)
  if (_internal_has_msg()) {
    clear_has_content();
      ::jx::MsgContent* temp = content_.msg_;
    content_.msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::jx::MsgContent& BaseDatagram::_internal_msg() const {
  return _internal_has_msg()
      ? *content_.msg_
      : *reinterpret_cast< ::jx::MsgContent*>(&::jx::_MsgContent_default_instance_);
}
inline const ::jx::MsgContent& BaseDatagram::msg() const {
  // @@protoc_insertion_point(field_get:jx.BaseDatagram.msg)
  return _internal_msg();
}
inline ::jx::MsgContent* BaseDatagram::_internal_mutable_msg() {
  if (!_internal_has_msg()) {
    clear_content();
    set_has_msg();
    content_.msg_ = CreateMaybeMessage< ::jx::MsgContent >(
        GetArenaNoVirtual());
  }
  return content_.msg_;
}
inline ::jx::MsgContent* BaseDatagram::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:jx.BaseDatagram.msg)
  return _internal_mutable_msg();
}

// .jx.ContactsContent contacts = 3;
inline bool BaseDatagram::_internal_has_contacts() const {
  return content_case() == kContacts;
}
inline bool BaseDatagram::has_contacts() const {
  return _internal_has_contacts();
}
inline void BaseDatagram::set_has_contacts() {
  _oneof_case_[0] = kContacts;
}
inline void BaseDatagram::clear_contacts() {
  if (_internal_has_contacts()) {
    delete content_.contacts_;
    clear_has_content();
  }
}
inline ::jx::ContactsContent* BaseDatagram::release_contacts() {
  // @@protoc_insertion_point(field_release:jx.BaseDatagram.contacts)
  if (_internal_has_contacts()) {
    clear_has_content();
      ::jx::ContactsContent* temp = content_.contacts_;
    content_.contacts_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::jx::ContactsContent& BaseDatagram::_internal_contacts() const {
  return _internal_has_contacts()
      ? *content_.contacts_
      : *reinterpret_cast< ::jx::ContactsContent*>(&::jx::_ContactsContent_default_instance_);
}
inline const ::jx::ContactsContent& BaseDatagram::contacts() const {
  // @@protoc_insertion_point(field_get:jx.BaseDatagram.contacts)
  return _internal_contacts();
}
inline ::jx::ContactsContent* BaseDatagram::_internal_mutable_contacts() {
  if (!_internal_has_contacts()) {
    clear_content();
    set_has_contacts();
    content_.contacts_ = CreateMaybeMessage< ::jx::ContactsContent >(
        GetArenaNoVirtual());
  }
  return content_.contacts_;
}
inline ::jx::ContactsContent* BaseDatagram::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable:jx.BaseDatagram.contacts)
  return _internal_mutable_contacts();
}

// .jx.TextContent text = 4;
inline bool BaseDatagram::_internal_has_text() const {
  return content_case() == kText;
}
inline bool BaseDatagram::has_text() const {
  return _internal_has_text();
}
inline void BaseDatagram::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void BaseDatagram::clear_text() {
  if (_internal_has_text()) {
    delete content_.text_;
    clear_has_content();
  }
}
inline ::jx::TextContent* BaseDatagram::release_text() {
  // @@protoc_insertion_point(field_release:jx.BaseDatagram.text)
  if (_internal_has_text()) {
    clear_has_content();
      ::jx::TextContent* temp = content_.text_;
    content_.text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::jx::TextContent& BaseDatagram::_internal_text() const {
  return _internal_has_text()
      ? *content_.text_
      : *reinterpret_cast< ::jx::TextContent*>(&::jx::_TextContent_default_instance_);
}
inline const ::jx::TextContent& BaseDatagram::text() const {
  // @@protoc_insertion_point(field_get:jx.BaseDatagram.text)
  return _internal_text();
}
inline ::jx::TextContent* BaseDatagram::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_content();
    set_has_text();
    content_.text_ = CreateMaybeMessage< ::jx::TextContent >(
        GetArenaNoVirtual());
  }
  return content_.text_;
}
inline ::jx::TextContent* BaseDatagram::mutable_text() {
  // @@protoc_insertion_point(field_mutable:jx.BaseDatagram.text)
  return _internal_mutable_text();
}

inline bool BaseDatagram::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void BaseDatagram::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline BaseDatagram::ContentCase BaseDatagram::content_case() const {
  return BaseDatagram::ContentCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace jx

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::jx::BaseDatagramHeader> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jx::BaseDatagramHeader>() {
  return ::jx::BaseDatagramHeader_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_5fdatagram_2eproto
